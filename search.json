[{"categories":["homelab","homeassistant","smarthome"],"content":" As a Coffee lover… of course this post had to start that way.\nI have a dumb coffee machine for my morning coffee on my way to work. It is just an on-off coffee machine, the brewing cycle last around 10 min and then it just keeps warm the jar. Wouldn't it be a good idea to make it smart so the coffee will be ready when I wake up?\nYou can google \"smart dumb coffee machine\" and find some cool hacks. Some of them involves coffee machines that already have some programable functions, so they involve cutting some wires and solder them into an ESP8266/ESP32 module in order to use them.\nIn this case, I wanted to be the less intrusive with the coffee machine, meaning that in case of failure I will be able to detach and replace quick and easy. This makes the process more modular, just plug and play.\nI thought about a few key points to make it work:\nThe coffee machine on-off switch must be always on. One relay will control the on-off state of the coffee machine. This can be achieved by a single smart plug. However, the coffee machine will be on even if there is not water in the tank, this could lead to premature damage. In order to solve this, a water level sensor is needed to check if there is water in the tank. As it is needed to work the less intrusive possible, I decided to go with the XKC-Y25-NPN, which is a capacitive sensor so it can be placed outside the water tank. Finally, I decided to use a Sonoff mini R2, it provides a relay, 5V supply and it exposes the GPIO04 and ground trough the switch (S2 and S1 connections, respectively) that can be used to receive the signal of the water level sensor. So minor modifications are needed.\n5V output from MiniR2 to XKC-Y25-NPN According to the schematics, you can take a 5V supply from the MiniR2, Hackaday modded it to add a second switch, and you can see in the image where you can take the 5V supply\nSolder a jumper wire where the 5V is located, it is thin enough to fit the little hole in the MiniR2 so the case will close completely without problem.\nNOTE: ignore the black ground cable, I had to do this fix due to a previous mistake I made.\nConnect the XKC-Y25-NPN The XKC-Y25-NPN has 4 wires:\nBrown: 5V input (Vcc). Blue: Ground. Yellow: Signal. Black: Mode. The black cable is not really needed, but it works this way:\nDisconnected: Yellow wire will be connected to Brown (5V supply)\nThis is the mode we want, as it works as a water detection sensor. If it detects water, it will send the signal, when connected to a led the led will turn on. Or when connected to a relay, it will close the relay turning on a water pump to avoid flooding. If connected to Blue (ground), then Yellow wire will be connected to Blue (ground).\nThis mode is useful to stop a water pump connected trough a relay, when the water reaches certain level. If water is below the desired level the relay will be closed (turning the water pump on), and when the water reaches the desired level it will open the relay (turning the water pump off) Here is a helpful video to understand how it works.\nConnect the wires accordingly:\nBrown to 5V. Yellow to GPIO04 (S2). Blue to ground (S1). ESPHome Code For this part I am assuming you already know how to flash ESPHome in a the MiniR2. If not, take your time to google a little bit.\nThe yaml file includes by default: board, logger, api, ota, webserver, captive portal, etc. But the important part is the GPIO configuration.\nFor the MiniR2 we know:\nGPIO13, is the status led. GPIO12, is the relay. GPIO04, is the switch (S2) GPIO00, is the physical button. And Ground, is in the switch (S1). So we create the entries for the status led and relay:\n1 2 3 4 5 6 7 8 9 status_led: pin: number: GPIO13 inverted: true output: - platform: gpio id: relay_1 pin: GPIO12 Then we add a switch. Usually this would be controlled by the GPIO04 (S2) to toggle the relay, but we will use the GPIO04 for the water sensor. So this switch will not be linked to any GPIO but will turn on-off the relay when pressed from the webUI or homeassistant.\n1 2 3 4 5 6 7 8 9 switch: - platform: output id: switch_1 name: \"minir2 relay state\" output: relay_1 on_turn_on: - output.turn_on: relay_1 on_turn_off: - output.turn_off: relay_1 Then we define the physical button use. On press it will toggle the switch that eventually will turn on or off the relay.\n1 2 3 4 5 6 7 8 9 10 11 binary_sensor: - platform: gpio pin: GPIO00 id: reset internal: true filters: - invert: - delayed_off: 10ms on_press: - switch.toggle: id: switch_1 And finally, under the same binary_sensor declaration we place the water sensor. We add the device_class as moisture so it will show \"Dry\" or \"Wet\" when water is detected. After testing, I had to add the inverted: true in order to display correctly the wet/dry state.\n1 2 3 4 5 6 7 8 - platform: gpio id: water_1 name: \"Water tank\" device_class: moisture pin: number: GPIO04 inverted: true mode: INPUT_PULLUP You can find the full yaml file here.\nResult and automation That's it, plug the coffee machine to the MiniR2 (I am using an extension cord) and place the sensor in the desired level. They can be placed with double sided tape, or anything else. Remember it is plug\u0026play.\nOnce connected, add the device in homeassistant and you should see the switch state and water level sensor. Finally, create an automation that follows the next logic:\nFrom Mon-Fri at 7am If water tank = Wet Then turn on relay Sleep for 30 min Then turn off relay. It should look like this in yaml syntax, but I created it using the homeassistant visual editor which is easier to use:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 alias: Turn on coffee - workdays description: Turn on coffee machine at 7:00 am on workdays. trigger: - platform: time at: \"07:00:00\" condition: [] action: - if: - condition: time weekday: - mon - tue - wed - thu - fri - condition: state entity_id: binary_sensor.water_tank state: \"on\" then: - type: turn_on device_id: \u003c..device id..\u003e entity_id: switch.minir2_switch_state domain: switch - delay: hours: 0 minutes: 30 seconds: 0 milliseconds: 0 - type: turn_off device_id: \u003c..device id..\u003e entity_id: switch.minir2_switch_state domain: switch mode: single Final thoughts Well it works and it can be used with the generic Tuya smart switches, you just need to find out where to take the 5V output and configure it using esphome-libretiny. You can add the automation directly to the ESPHome yaml so the device flashed with compiled firmware will work independently from homeassistant. So even if your homeassistant is down, you will still have coffee. To do so, please follow the ESPHome automation guide. I actually have like 4 esp32 that I haven't used. One of them was planned for this purpose, together with a relay and a hlk-pm01, but the MiniR2 provides the relay and power supply in a small form factor, so that was the reason I ended up doing this. Since it worked nicely, now I am planning to use the MiniR2 together with PZEM-04T for energy monitoring. It needs more modding, since the PZEM-04T requires 2 pins for communication Rx/Tx, but I think it is feasible and it will be still small form factor. Enjoy your coffee! ","description":"","tags":["smart","iot","homeassistant","esphome","coffee","water","level","sensor","switch","sonoff"],"title":"Make smart a dumb coffee machine with ESPHome","uri":"/posts/smartdumbcoffe/"},{"categories":["homelab","homeassistant","smarthome"],"content":"I bought a sonoff mini r2 with the intention to automate my bedroom light. It requires a neutral wire to work, so it was quite difficult to use in my room due to light is connected in a two way switch and it does not have neutral wire. Eventually, I sorted it out by pulling a neutral from a plug close to one of the switches. However, in the process I screwed it up…\nI accidentally connected the neutral wire in the S1 input (which is actually connected to ground) of the sonoff while wiring the manual switch and I blew up the D4 diode.\nLuckily, nothing else was damaged. I just lost the feature of the manual switch. Nevertheless, If I connected the S2 (which is GPIO04) to another exposed ground, the manual switch worked. So I ended up making a \"bridge\" (I think the English term is \"jumper\") between the ground and the S1 connection. This is the result:\nThe drawback is that if by accident, again, I connect the hot or neutral wire to the S1, the whole device is going to be fried. I tried to solder a diode for protection but due to the small space in the enclosure, sometimes the relay got stuck, like if it was inducted by the diode, so I decided to remove the diode.\nAnyway, if someone face the same problem I hope this helps them out.\nBTW, I ended up removing the sonoff mini r2 and instead installed a smart light bulb.\nIf you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["smart","iot","homeassistant","esphome","tasmota","light","switch","sonoff"],"title":"Sonoff mini r2, my screw up and repair","uri":"/posts/sonoffminir2repair/"},{"categories":["homelab","homeassistant","smarthome"],"content":" If you started to install smart devices, you realized that you need apps to manage the devices. The more popular are Tuya, Smart life and eWeLink. However, they come with a drawback: They rely on the third party cloud, if you loss internet connection you won't be able to control the devices. In order to solve that you can re-flash the devices with another software. In other words, override the software of the device which will allow you to control the device locally. I'll discuss some I've used just for put them in your radar.\nESPHome ESPHome is a system to control your ESP8266/ESP32 and RP2040 by simple yet powerful configuration files and control them remotely through Home Automation systems.\nThis is by far the most popular software, highly customizable and configurable through YAML files that make the programming easily readable. There many devices supported, if they have and ESP82XX/ESP32 chip surely there is already a template for the device. You can also experiment with ESP devkit boards for your specific needs.\nPROS:\nFully integrated with HomeAssistant. No need to know how to program, YAML files are used to instruct the programming of the devices. Easy to install. Documentation is very extensive. Very active community to find support. OTA updates. CONS:\nNeed to recompile the software if you want to change something in the device configuration. Web UI component is very limited to control the device from the Web. Time to read the documentation (is it really a con?) LibreTiny (AKA LibreTuya) LibreTiny is a port of ESPHome to work with non-ESP chips, like devices with Beken chips (e.g. BK7231N/T devices, CBU, CB3s, WB3L chips, etc.). This means, it is fully compatible with ESPHome configurations through YAML and it can be installed through Tuya-CloudCutter for supported devices, so opening the device and solder wires is not needed.\nPROS:\nFully integrated with HomeAssistant. No need to know how to program, YAML files are used to instruct the programming of the devices. Can be installed through Tuya-CloudCutter. Easy to install. You can get YAML templates for specific supported devices here. Documentation is the same as ESPHome for YAML configuration. Very active community to find support. OTA updates. CONS:\nNeed to recompile the software if you want to change something in the device configuration. Some Tuya devices now work with a TuyaMCU, which is an extra layer of communication between the device and you. This requires extra steps. Web UI component is very limited to control the device from the Web. Time to read the documentation (is it really a con?) Tasmota Tasmota is an open source firmware for Espressif ESP8266, ESP32, ESP32-S or ESP32-C3 chipset based devices created and maintained by Theo Arends. Tasmota allows you to control the device using MQTT, Web UI and HTTP. Automate using timers, rules or scripts within the device using the Web UI.\nPROS:\nFully integrated with HomeAssistant through MQTT. Everything can be configured from the Web UI. No need to know how to program. Easy to install. No need to recompile for single changes. Documentation is very extensive. Very active community to find support. OTA updates. CONS:\nNeeds a MQTT broker to be fully integrated with homeassistant. I found some of the documentation instructions outdated. Time to read the documentation (is it really a con?) OpenBeken OpenBeken is a Tasmota/ESPHome replacement for new Tuya modules featuring MQTT and Home Assistant compatibility. It is designed to work with Beken chips (e.g. BK7231N/T devices, CBU, CB3s, WB3L chips, etc.). In appearance it is very similar to Tasmota, but it is not a port like LibreTiny to ESPHome. OpenBeken is a new firmware. It can be installed through Tuya-CloudCutter for supported devices, so opening the device and solder wires is not needed.\nPROS:\nFully integrated with HomeAssistant through MQTT. Everything can be configured from the Web UI. No need to know how to program. Easy to install. No need to recompile for single changes. Can be installed through Tuya-CloudCutter. You can get configuration templates for specific supported devices here. OTA updates. CONS:\nNeeds a MQTT broker to be fully integrated with homeassistant. Documentation is still a work in progress. Some Tuya devices now work with a TuyaMCU, which is an extra layer of communication between the device and you. This requires extra steps. No re-flash solutions If you do not want to re-flash the devices, there a another few alternatives\nTinyTuya, is a python module controls and reads state of Tuya compatible WiFi Smart Devices (Plugs, Switches, Lights, Window Covers, etc.) using the local area network (LAN). First you need to use Tuya-CloudCutter to disconnect the device from the cloud. ZigBee, is a low-power wireless mesh network standard targeted at battery-powered devices in wireless control and monitoring applications. ZigBee devices can be integrated to HomeAssistant through Zigbee2MQTT, ZHA or deCONZ but you will need a Zigbee Gateway. Matter (and Thread), is a local protocol. Device control is done without the need of any cloud. From a technical perspective, you can use a Matter-compatible device with Home Assistant without connecting to a vendor-specific cloud. It allows to control devices through a protocol that runs on top of the existing network infrastructure, using your existing Wi-Fi/Ethernet routers and Thread. It is still _under HomeAssistant development. Similarly to ZigBee, you will need a Matter bridge in order to connect/use the devices. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["remote","smart","iot","homeassistant","esphome","tasmota","openbeken","libretuya","libretiny"],"title":"IoT devices, local control","uri":"/posts/esphometasmota/"},{"categories":["homelab","homeassistant","smarthome"],"content":" Open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.\nHomeAssistant is basically an OS (?) where you can add all the IoT devices (e.g. smart switches, cameras, smart led lights, sensors, TVs, etc.) of your home, to be controlled locally from a friendly UI, with ability to create automations to be executed at specific times and/or events. I will just cover the basics.\nUsually the automations that come to my mind are easy but time consuming:\nFeeling lazy to get up of the bed to turn off the light? Easy. Turn off all the lights if nobody it at home? No problem. Activate alarm if movement is detected while you are sleeping? Of course! Who the fuck enjoys watering the plants? Exactly! Start the coffee machine so coffee is ready when you get up? Yes sir! Installation There are several ways to install HomeAssistant, from using a raspberry pi, a docker container, full OS installation of virtualization. Depending on your needs, your experience and available hardware you may chose from the different options. Ususally the full OS is recommended. Either on a low power consumption hardware, like the raspberry or a tiny pc.\nIntegrations Once you have installed HomeAssistant, you can start adding integrations. Integrations can listen for or trigger events, offer services, and maintain states. So, an integration can be described as the main of communication between the instructions you give to HomeAssistant and the IoT device.\nAs an example, lets say you have a smart switch and you want to turn on your bedroom ligh and it is connected to \"light integration\" for homeassistant:\nYou (tur on) -\u003e HomeAssistant -\u003e Light integration -\u003e Light (state: OFF)\nthen the light will turn on and you will see a change of the state of the light from off to on\nYou \u003c- HomeAssistant \u003c- Light integration \u003c- Light (state: ON)\nAutomations Automations are that, a series of instructions that will run automatically when a trigger event occurs. The trigger can be:\nAn specific time: Everyday at 20:00 h start irrigation system. Motion triggered: When movement is detected, turn on hallway light. Sensor triggered: If temperature of kitchen rises to 30°C turn on fan extraction system. There are many pre-made automations called blueprints, where you can start looking around. Also, automations are easy to set up in HomeAssistant by just selecting from drop down menus.\nPlease ake a look at this demo to give you an idea of how it looks What smart devices should I use? This is probably the most important part, since it will later define the integrations in your HomeAssistant.\nMost popular devices are the SonOff switches, bases on ESP chips, that work with the eWeLink App, then is probably Tuya devices, based now on Beken chips that work with Tuya Smart App and Smar Life App. You'll be safe with this devices, later I'll write about how to re-flash some devices to avoid using the apps like eWeLink and Tuya.\nFinal thoughts I just covered quickly HomeAssistant, since there is plenty of information about it and the community is very active.\nYou can integrate Google home and alexa and make use of voice commands. There are alternatives like OpenHAB, Domoticz or Homebridge. Remember, you must run HomeAssistant 24/7 to work correctly, so a low power consumption hardware is recommended (like the raspberry pi). I just wanted to bring HomeAssistant to your radar, I hope this post helped. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["server","remote","smart","iot","homeassistant"],"title":"Home-Assistant, being lazy at home","uri":"/posts/homeassistant/"},{"categories":["homelab","OpenWrt"],"content":" Previously, we spoke of how easy is to set a mesh network between your devices with tailscale. Usually, that will work for most of the people, but in the view that you are using a third party server that might log your activity you would probably want to avoid that and maybe self host the mesh management (there are huge communities that like to selfhost this kind of services of their homelab). Luckily, headscale exist as An open source, self-hosted implementation of the Tailscale control server. It has support for most of the OS's\nOf course, tailscale is more robust and sophisticated. Headscale only makes use of a single tailnet which is enough for a single organization or your homelab.\nSo we are goint to install headscale assuming the following:\nYou have a VPS that will host headscale running 24/7 and is running Linux (Ubuntu 22.04 is the one I use now). Headscale will be run using the root user. You have created a DNS entry that redirects to your VPS address (see DuckDNS entry if you haven't). Your homelab is behind a NAT not able to forward ports. You have time and want to access your homelab from your phone. Install Headscale On your VPS open TCP ports 80, 443 and 8080 and UDP ports 41641 and 3478 (this is optional to set a DERP relay and you can select another. Then download the binary for your platform from the releases section and save it in the bin path (usually /usr/local/bin/ in ubuntu). Make it executable sudo chmod +x /usr/local/bin/headscale Create database directory: sudo mkdir -p /var/lib/headscale and an empty database sudo touch /var/lib/headscale/db.sqlite And finally create the directory for configuration: sudo mkdir -p /etc/headscale with its configuration sudo touch /etc/headscale/config.yaml Now, for the configuration you can use this template and we need to change the following:\nserver_url: http://127.0.0.1:8080 Change this for your public domain created with duckdns. For exaple: server_url: https://enchilada.duckdns.org:8080 listen_addr: 127.0.0.1:8080 Change it to listen all addresses: listen_addr: 0.0.0.0:8080 ip_prefixes: Here you can modify the subdomain your layer network will have. The default is: 100.64.0.0/10 This means that the connected devices will addresses like 100.64.0.2. derp: This is optional, if enabled the headscale server will act as a relay as well and it will be added to the plublic available derp servers from tailnet. By default DERP server is disabled, if you want it change it to enabled: true. Read here for more info. tls_letsencrypt_hostname: \"\" Add your domins like: tls_letsencrypt_hostname: \"enchilada.duckdns.org\" This is the domain name to request a TLS certificate from LetsEncrypt. tls_letsencrypt_cache_dir: ./cache Change it to tls_letsencrypt_cache_dir: /var/lib/headscale/cache This is where the TLS certificate will be saved. It is already default to /var/lib/headscale/cache commit b684ac0 Thanks to 7kn for pointing this out. dns_config: Here add the DNS server you'd like, by default there is only 1.1.1.1 in the nameservers: section. base_domain: example.com This is for MagisDNS feature, change it to enchilada.duckdns.org Now it will create an entry for devices like: phone.enchilada.duckdns.org that will be reachable for the devices connected. Before first starting headscale, run sudo mkdir -p /var/run/headscale since the socket was moved in a recent update. Thanks to 7kn for pointing this out. Now you can run it with sudo headscale serve to start the server. See here how to create a SystemD service to running it in the background and enable it at boot.\nYou can check with curl http://127.0.0.1:9090/metrics that everything went well and then create the network (tailnet) where you registered devices will communicate (replace mynet with the name you want):\n1 sudo headscale users create mynet Join devices In order to joint to mynet network, you can use the official tailscale app and run:\nLinux and OpenWrt Simple login can be done with:\n1 sudo tailscale up --login-server=https://enchilada.duckdns.org:8080/ #Of course replace with your domain If you want to expose your local subnet (devices connected to your OpenWrt router) you should add the flag --advertise-routes=192.168.1.0/24. If you are running OpenWrt 22.03 or later, you need to add the flag --netfilter-mode=off and configure the firewall rules, due to tailscale uses still iptables and latest versions of OpenWrt switched to nftables. See issue here.\nAndroid Here, how to use a custom server in the official tailscale-android app.\nRegistrations to headscale Now, everytime that you add a device with one of the steps above, you will be redirect to a webpage with instructions like this: Image taken from the GuruComputingBlog.\nNOTE: In recent version of Headscale the -n command was substituted by --user\nThe instruction tells you to run the following command (as sudo in our case) in our headscale server:\n1 sudo headscale --user NAMESPACE nodes register --key \u003ca-fuckin-long-key\u003e Replace NAMESPACE with mynet or the name you gave to your net and that's it.\nYou can check the list of devices (or nodes) by running the following in the headscale server\n1 sudo headscale nodes list Final thoughts The Guru Computing blog has a nice tutorial for setting headscale. Tailscale/headscale use NAT transversal techniques to establish direct connection between devices and avoid DERP relay servers. I haven't been able to see this working, at least from Phone-to-OpenWrt(router) and have not been able to test another devices since my network is very small. DERP servers are only used when no direct connection can not be established. This will add latency depending on the DERP server. Tailscale/headscale do not use the WireGuard kernel module, but the userspace implementation in go. Kernel module should, in theory, perform better than the userspace implementation. However, in practice you might not be able to tell the difference unless you are a hardcoded IT guy. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["tailscale","headscale","netmaker","zerotier","ssh","vpn","OpenWrt"],"title":"Headscale, how to self-host tailscale","uri":"/posts/headscale/"},{"categories":["homelab","OpenWrt"],"content":" Duck DNS is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice.\nIn other words, you can create:\nyourverycoolandawesomewebsitethatnooneknowsabout.duckdns.org\nthat will point to the ip of your homelab or VPS.\nWhy? Well, I already wrote about how to access remotely to your homelab using the Tor network. Also how it can be simplified using Tailscale and to avoid sending data to tailscale servers you could use headscale to selfhost.\nSo, usually you will ssh your homelab with:\n1 ssh user@ip-of-the-server Where the ip-of-the-server will be something like 186.120.64.13 and if you do not have a static ip, it will change to a different one every certain time, which will be difficult to keep track. In order to avoid this hassle, it is easier to create a DNS entry and configure your home server to update automatically the ip. Here is where DuckDNS comes in play.\nDuckDNS allows you to create up to 5 sites for free and provides easy to use scripts to update the ip. All you need is to register using a twitter, github or google account to obtain your token and then you can create your domain like: enchilada.duckdns.org\nNow you could ssh to your homelab like:\n1 ssh user@enchilada.duckdns.org Now it won't matter if your homelab changes the ip, enchilada.duckdns.org will always redirect to the correct one. This is also usefull if you want to host a website.\nI would go into detail of how to install the script, but you can check the instructions and practically do copy and paste. They have instructions for windows, linux, osx and even routers running OpenWrt, dd-wrt or a synology NAS.\nFinal thoughts There are other dynamic DNS (DDNS) providers like noip, that will allow you up to 3 free domains and another paid options. Next topics: create a free WireGuard hub server with Oracle Cloud free tier and how to set up headscale on the free Oracle Cloud free tier and making use of DuckDNS. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["dns","ip","server","remote","duckdns","OpenWrt"],"title":"DuckDNS, forget your ip","uri":"/posts/duckdns/"},{"categories":["homelab","OpenWrt"],"content":" If you have a server, you know it is useful to have information of your server to troubleshoot and detect problems or bad configurations, usage of the CPU, ram, network and health of the HDD.\nThere are plenty of options: monit, monitorix, munin, Netdata and Grafana (coupled with one data collector like: collectd, influxdb, Graphite or Prometheus)\nDespite Grafana is one of the most popular choices, I decided to use Netdata, since it is pre-configured out of the box and it does both collect data and create graphs displayed through a http server. It is lightweight that will only require 1% CPU usage and around 12 MiB of RAM (at least in my OpenWrt router). Munin is my second choice, but decided to go with Netdata just because it just worked fine after install without too much hassle to configure.\nNetdata is a real-time performance and health monitoring tool. It can run on all your physical/virtual servers, containers, cloud deployments, and edge/IoT devices. Out of the box it generates lots of graphs in a default dashboard and you can create your own dashboard to show the specific graphs you are more interested to.\nInstalling Netdata Netdata is like a single binary, so just install it like:\nArchlinux:\n1 pacman -S netdata OpenWrt:\n1 2 opkg update opkg install netdata And finally start the daemon Archlinux:\n1 2 systemctl enable netdata.service systemctl start netdata.service OpenWrt:\n1 2 /etc/init.d/netdata enable /etc/init.d/netdata start Configure There is not much to configure, really. You can access http://localhost:19999/ (where localhost can be substituted by the ip of your server) and will take you to the default dashboard.\nFor OpenWrt config file is already optimized for low resources devices.\nWhat you might want to do is create a custom dashboard that fits the most important metrics you want to follow quickly.\nCustom Dashboard Simple dashboards are written in HTML, so you might need basic knowledge of html. More complicated dashboards can be written in javascript, but in my case html is just fine.\nFirst look at the template here (you can also see all the supported graphs) and here (view the page source at the latter). You can see the blocks contained between the \u003cdiv \"content\" \u003e\u003c/div\u003e. This will be used to add graphs to the dashboard, and the \"content\" will include variables like the unique id, width, height, type of graph.\nBe sure to put these \u003cdiv\u003e blocks inside the \u003cbody\u003e \u003c/body\u003e of the html file. Also replace your server ip in the \u003cscript type=\"text/javascript\" src=\"http://netdata.server:19999/dashboard.js\"\u003e\u003c/script\u003e section\nIdentify the IDs Unique IDs reffer to the part of the system or metric being monitored. It could be system.cpu (for CPU usage), system.ram (ram usage), net.eth1 (bandwith monitor on interface eth1), disk.sda (Disk I/O Bandwidth in sda disk), etc.\nYou can check the full existing IDs being monitored in http://your.server.ip:19999/api/v1/charts and expand the charts section. The ID is declared as:\n1 2 \u003cdiv data-netdata=\"system.cpu\" \u003e\u003c/div\u003e Type of graph The default chart library is dygraph, but you can set a different chart library per chart using data-chart-library. The graphs can be dygraph, d3, d3pie, gauge, google, easypiechart, peity, sparkline and text-only. The documentation is not very clear on how to use each graph, but mostly dygraph, easypiechart, d3pie and gauge will give you most the graphical input needed. The type of graph is declared as:\n1 2 3 \u003cdiv data-netdata=\"net.eth1\" data-chart-library=\"dygraph\" \u003e\u003c/div\u003e Other attributes You can specify other attributes such as tittle, colors, height and width to prettify the dashboard.\nTitle: Will override default tittle text data-title=\"my super chart\" Colors: By default, netdata uses an internal palette of colors for the dimensions of the charts. You can prepend colors to it (so that your will be used first) using this data-colors=\"#AABBCC #DDEEFF ...\" Height and with: You can specify a custom height and width and it can be anything CSS accepts for width and height (e.g. percentages, pixels, etc) data-width=\"WIDTH\" and data-height=\"HEIGHT\" Data points: For the time-frame requested, netdata will use the chart dimensions and the settings of the chart library to find out how many data points it can show. A default dygraph will show 10 min of data (600 s), you can set the data point to 300 in order to update the graph every 2 s data-points=\"300\" Data dimensions: By default, a netdata graph will show all the dimensions of the chart. You can select specific dimensions using this data-dimensions=\"dimension1,dimension2,dimension3,...\" You can check all the dimensions by expanding the ID in the chart section in http://your.server.ip:19999/api/v1/charts. For example, net.eth1 dimensions are received and sent. This attribute is useful for graphs like pie or gauge to display an specific dimension of a metric. In summary, you could have a dygraph and gauge like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u003cdiv data-netdata=\"disk.sda\" data-title=\"Read-Write sda\" data-chart-library=\"dygraph\" data-width=\"80%\" data-height=\"100%\" data-points=\"300\" \u003e\u003c/div\u003e \u003cdiv data-netdata=\"net.eth1\" data-title=\"Received data\" data-dimensions=\"received\" data-chart-library=\"gauge\" data-width=\"20%\" data-height=\"100%\" data-points=\"300\" \u003e\u003c/div\u003e Final thoughts Netdata is simple to install and use, since it is pre-configured. If you need a more robust tool, you might take a look at the Grafana and influxdb. You can enable more plugins such as netdata S.M.A.R.T. attributes plugin to monitor HDD/SDD health. As a health monitor, Netdata comes with some configured alarms that will trigger warnings in the default dashboard but you can also set email notifications and even telegram notifications. Finally, here are some examples of my own custom dashboard (below screenshots using my phone), one is used for my media server and the other on my OpenWrt router. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["netdata","server","data","monitor","OpenWrt"],"title":"Netdata, real-time server monitoring","uri":"/posts/netdata/"},{"categories":["homelab","OpenWrt"],"content":" Recently I wrote about how to use the Tor network as a free VPN and how to make as secure as possible in the Tor a hidden friend to SSH your home network entry. However, I recommended to use WireGuard to connect securely and fast to your home network if you could set port forwarding on your router and leave Tor as a last option, since it is slow and its main goal is to serve as a circumvent censorship tool rather than a VPN.\nThe other option was to pay and make use of a VPS and here is where Tailscale comes into play and from their website: Tailscale is\na VPN service that makes the devices and applications you own accessible anywhere in the world, securely and effortlessly. It enables encrypted point-to-point connections using the open source WireGuard protocol, which means only devices on your private network can communicate with each other.\nSo Tailscale is a VPN that uses WireGuard, which means it is fast and secure. But WireGuard is used by other VPN providers… well the difference is that Unlike traditional VPNs, which tunnel all network traffic through a central gateway server, Tailscale creates a peer-to-peer mesh network (called a tailnet).\nSo, in short it \"removes the man in the middle\" (VPN hub) and allows your phone to connect directly to your Plex server, without routing in between.\nHere I am saying that it \"removes the man in the middle\", but it is not completely true, since you have to login all your devices into the tailscale website through their app, so it is not completely private. The app will take care of all the needed configurations, this is the great thing because all you just need to do is to login. You will not need open ports and/or configure forwardings.\nIt might not be completely private and it does not fully removes the man in the middle, but for now it is free, you can register for 1 account and login until 20 devices.\nTailscale install on OpenWrt You can install the app on every devices you want (remember you are limited to 20 in a free account) and by authorizing the login the website each device will be able to communicate between them directly.\nInstallation is very simple, as they claim it is a Zero config VPN and A secure network that just works. Go ahead and create your tailscale account first.\nOn OpenWrt you just have to run the following commands (or install it through Luci):\n1 2 opkg update opkg install tailscale tailscaled Once completed, enable the daemon and start it:\n1 2 /etc/init.d/tailscale enable /etc/init.d/tailscale start Now simply run:\n1 tailscale up A link will show, go to that link in your browser and login. et voila! the OpenWrt router is completely registered.\nSince version 22.03 of OpenWrt you need to add the flag --netfilter-mode=off and configure the firewall rules, due to OpenWrt uses now nftables.\nTailscale on Android Yeah, just go to the Play Store, install the app and login. C'est tout!\nOnce logged in, start it, you will see your OpenWrt router. You can tap the router name to copy the address, paste it in the browser and you will be directed to the Luci page (assuming yours is OpenWrt).\nYou can repeat this within all your servers, it just works!\nAlternatives headscale If you are able to set a VPS or can do port forwarding and are willing the keep running 24/7 a server, you could set headscale, which is an open source, self-hosted implementation of the Tailscale control server. This way you will be in full control of your devices without the need to register to tailscale. Using tailscale apps will work with headscale. Android app will not work, you will have to compile it your self or as explained in this post from icloudnative (in chinese), you could use the FZR-forks Tailscale Android Client (look in the Actions section to download the last compiled version) that allow custom urls for the Tailscale control server. This way the Android app will work.1\nNetmaker Another alternative is Netmaker, which does practically the same as tailscale or headscale using the WireGuard protocol. As headscale, you will need a VPS or perform port forwarding to keep your server running 24/7 the control server. They have app support for Linux, FreeBSD, Windows, Mac, etc… and for the ones that do not have app support, the official WireGuard app can be used without problem.\nZeroTier There is also ZeroTier, which will do the same as the previous but without WireGuard. ZeroTier offers a self hosted controller (as headscale and Netmaker), a free ZeroTier Hosted Controller (as tailscale) and professional/enterprice plans. ZeroTier has support for practically all platforms.\nFinal thoughts I have installed Tailscale now in my OpenWrt router, where I connect, using my phone, to access the webui-aria2 (or you can choose AriaNg or jjling2011's AriaNgMod), so I can download Linux ISOs when I am away from home and will be ready when I arrive. I also have Wake-on-Lan (WoL) on the OpenWrt, which I use to wake a Plex server when I need it, since I do not like to have it powered on 24/7. Tailscale uses WireGuard, so all traffic is encrypted and it is faster that OpenVPN and IPsec. It is unsure how long the free service of Tailscale will last, you might have to pay later a fee to keep using it, but for now use it as much as you can. Remember that you have to create an account, so data usage might be sent to a third party. Tailscale was founded in 2019, while WireGuard has been under development since 2015/2016. Yeah, WireGuard is relatively new but has proved to be effective. By default Tailscale will only create an overlay to route traffic within devices, but will not touch the public traffic of the devices. You can configure an exit node so all the public traffic would be routed to one device to perform the internet connection, like a normal VPN. My ISP refuse to open ports in the router that sold me and I hate it for that. I will insist again so I can configure WireGuard peer-to-peer without any third party. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y Footnotes 1 Actually now, the official Tailscale android app allows you to select a custom server to make it work with headscale.\n","description":"","tags":["tailscale","headscale","netmaker","zerotier","ssh","vpn","OpenWrt"],"title":"Tailscale, making WireGuard simpler for home networks","uri":"/posts/tailscale/"},{"categories":["homelab","OpenWrt"],"content":" You might had heard of the Dark web or the Deep web, well the first one is just a small part of the latter. The Dark web is populated with darknets which is an overlay network within the Internet that can only be accessed with specific software, configurations, or authorization.\nThese darknets can be small peer-to-peer networks or large as the I2P Anonymous Network, Freenet and the most popular Tor Project. In this case, we will focus in the Tor network and how to use it to connect to your home network for remote control.\nWhy Tor and not a safer choice: WireGuard If you have a public IP on your router (and you are able to set Port forwarding), I highly encourage the use of WireGuard which is a fast, modern and secure VPN tunnel to connect to your home network. It encrypts all data and is faster than we will experience with the Tor network (and it is even faster than other alternatives such as OpenVPN and IPSec, without compromising security). And with the help of a Dynamic DNS (DDNS) you could easily connect to your home network even if you have a dynamic IP.\nOn the other hand, you could rent a Virtual private server (VPS), connect both your home network and client devices (e.g. your phone) to the VPS and forward, within the VPS, all the traffic from the client devices to your home network. However, this implies that you have to pay monthly fee for the rent. If you can afford it, go for it, if not keep reading.\nTor network The main reason to use of tor is user privacy, circumvent censorship and surveillance by means of encryption and layers. Therefore, it is not recommended to be implemented for other uses such as streaming, file sharing and more, due to slow speed performance (because the relays, multiple ips, blah blah).\nThe Tor network is a free, worldwide, volunteer overlay network, consisting of more than six thousand relays and can be accessed through the tor software and easily with the Tor browser. On android it is also available Orbot from the playstore or F-droid.\nTor websites, better known as: onion services or hidden services, can only be accessed when connected to the tor network and are not the usual .com sites, but more like duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion which is the onion site for DuckDuckGo. You can create your own onion/hidden service which will be available only through the tor network. This can be the equivalent as creating a website and then expose it to the normal internet (by the means of a VPS, DDNS, etc).\nWith this in mind, we will create our own onion service and we will use it to access our home network via SSH as secure as possible.\nOpenWrt and Tor In this case we will create the onion service in a OpenWrt router and since OpenWrt is Linux, and Linux is free and open source, installing a free software like Tor is one of the simplest task. I am using the OpenWrt official guide for this matter.\nUpdate the list of packages: opkg update Install the needed packages: opkg install tor-hs openssl-util coreutils-base32. This will install tor and required libraries with ssl to create the authorization keys to secure access to your site. Create the Onion service in OpenWrt In the OpenWrt router edit the /etc/config/tor-hs file and add the following (or uncomment it):\nconfig hidden-service option Name 'sshd' option Description \"Hidden service for ssh\" option Enabled 'false' option IPv4 '127.0.0.1' #public port=2222, local port=22 list PublicLocalPort '2222;22' Edit the /etc/tor/torrc and add the following (this configuration is enough for what we want to do, you can delete other existing configurations):\nLog notice syslog RunAsDaemon 1 User tor DataDirectory /etc/tor/data/ HiddenServiceDir /etc/tor/hidden_service/ HiddenServicePort 22 127.0.0.1:22 This will enable:\nTor notifications on the system log of OpenWrt User tor tells that tor user is in charge of tor related tasks (and not the root user). DataDirectory will store Tor required data. HiddenServiceDir is the folder of our Onion service. Named here as hidden_service, but you can name the folder as you please. HiddenServicePort will the Tor which port to expose to the Tor network and will redirect traffic to the internal port of the router (syntax: ExposedPort LocalIP:InternalPort). We are using here port 22 which is used for SSH connections. Alternatively you could use a socket to avoid exposing things on your server that are restricted to the local machine. To do this you need to install socat in the OpenWrt router, create the socket and change ownership to tor user\n1 2 socat UNIX-LISTEN:/etc/tor/hidden.sock,fork TCP4:127.0.0.1:22 chown tor /etc/tor/hidden.sock Then change the HiddenServicePort line to HiddenServicePort 22 unix:/etc/tor/hidden.sock in the torrc\nCreate the folders and change user permissions\n1 2 3 4 mkdir /etc/tor/data/ mkdir /etc/tor/hidden_service chown -R tor:tor /etc/tor/hidden_service chown -R tor /etc/tor And restart tor with 1 /etc/init.d/tor restart Enabling Client Authorization Since the Onion service will be exposed to the Tor network, it is convenient to enable Client Authorization, this way the site will require clients to provide an authentication credential in order to connect to the Onion Service. In other words, clients need to provide a their private pair key which will be checked against the public pair key (stored in the OpenWrt router) in order to access the site content. Once client authorization is enabled, more security is added to the site: No valid key, no access.\nSSH to the OpenWrt router and create keys for secure connection of authorized clients\n1 openssl genpkey -algorithm x25519 -out /etc/tor/hidden_service.pem Create private key (this one is for the client)\n1 2 3 4 5 TOR_KEY=\"$(openssl pkey \\ -in /etc/tor/hidden_service.pem -outform der \\ | tail -c 32 \\ | base32 \\ | sed -e \"s/=//g\")\" Create the public key (this will be stored in our router)\n1 2 3 4 5 TOR_PUB=\"$(openssl pkey \\ -in /etc/tor/hidden_service.pem -outform der -pubout \\ | tail -c 32 \\ | base32 \\ | sed -e \"s/=//g\")\" Show your Onion service address (this is the address to be accessed through the tor network) and assign it to a variable:\n1 2 cat /etc/tor/hidden_service/hostname TOR_HOST=\"$(cat /etc/tor/hidden_service/hostname)\" Create the private key file (to be stored in your client)\n1 2 3 cat \u003c\u003c EOF \u003e client.auth_private ${TOR_HOST%.onion}:descriptor:x25519:${TOR_KEY} EOF Create the public key file in the authorized clients folder (in the router)\n1 2 3 cat \u003c\u003c EOF \u003e /etc/tor/hidden_service/authorized_clients/client.auth descriptor:x25519:${TOR_PUB} EOF Configure access key on Client Here we have three options:\nTor software in a Linux machine You might need to be root. Add the following to the tor configuration file /etc/tor/torrc, which will point to the path where you will store your private authentication keys\n1 ClientOnionAuthDir /etc/tor/onion_auth Create the folder\n1 mkdir /etc/tor/onion_auth Then just simply copy the client.auth_private file inside the /etc/tor/onion_auth\nTor Browser When trying to connect to the site, you will be asked by the browser to provide the key. Just paste the key, if you open the file client.auth_private you will see the key at the end, which was our TOR_KEY, it might look something like this: BBBEAUAO3PIFAH7SBGBI6A2QFAZBXG2NVN7HMBXFCZENJVF6C5AQ Orbot Tor browser on android is not able to connect to Client Authorization Onion service, but Orbot can. Enable this by going in the app to ⋮ -\u003e Onion Services -\u003e Client Authorization -\u003e + and add the Onion service address and the TOR_KEY At this point, you will be able to reach the Onion service, but will be unable to perform anything yet due to: On Tor browser connection will be refused since site is configured to expose only port 22 and this port is commonly used for SSH connections.\nOpenWrt and SSH By this point you might be familiar with how to SSH to your OpenWrt router and have already set a password to access. We could easily SSH connect to the Onion service using password authentication, but for more security we will disable this and configure it to just allow key authentication.\nCreate the SSH Key on client Since I am planning to access from my Android phone these are the steps I performed. This is reproducible in a Linux machine just skipping the Termux install.\nOn Android install termux from F-droid, open it and the install OpenSSH\n1 2 pkg upgrade pkg install openssh Create the ssh key with the following command (here we are using the Ed25519 algorithm for small keys without compromising security and adding a comment with the -C \"...\" option). Setting a pasword is optional when prompted:\n1 ssh-keygen -t ed25519 -C \"$(whoami)@$(uname -n)-$(date -I)\" A file /.ssh/id_ed25519.pub will be created in the phone. Then send this key to the OpenWrt and add it to dropbear to make it persistent\n1 2 ssh-copy-id -i .ssh/id_ed25519.pub root@192.168.1.1 #192.168.1.1 is the gateway of yout OpenWrt router, change it if yours is different ssh root@192.168.1.1 \"tee -a /etc/dropbear/authorized_keys\" \u003c ~/.ssh/id_rsa.pub Or print on screen the key, copy it and paste it into the Luci System -\u003e Administration -\u003e SSH-Keys and click add key\n1 cat .ssh/id_ed25519.pub Disable SSH password authentication on OpenWrt This is just as simple as login to the Luci and go to System -\u003e Administration -\u003e SSH Access and in Interface select Unspecified and uncheck Password authentication and Allow root logins with password\nOr from terminal, ssh to the router (you will still be asked for password if set) and run\n1 2 3 4 uci set dropbear.@dropbear[0].PasswordAuth=\"0\" uci set dropbear.@dropbear[0].RootPasswordAuth=\"0\" uci commit dropbear /etc/init.d/dropbear restart et voila, test it by connecting to the router using your phone from termux by running\n1 ssh root@192.168.1.1 This time you will not be asked for a password but will be logged automatically and if you or anyone attempt to login without having the authorized key (e.g. from another PC or phone), the connection will be refused.\nSSH to router from the Tor network Finally, we have Tor running in our router and it is running our Onion service. We just need to connect to the Tor network with our phone and then ssh to the Onion service.\nAgain, check that you have already set the Client Public Key in Orbot or you will not be able to reach the site. Then just run Orbot in VPN mode, open Termux and from Termux run\n1 ssh root@\"Your onion service/host.onion\" You should now be logged into the OpenWrt router and now you can control the services running on the router or ssh to another server inside your home network.\nTunnel ports You may want to access to services running on specific ports (like the Luci interface), then you use\n1 ssh root@\"Your onion service/host.onion\" -L 99:127.0.0.1:80 This will tunnel traffic from your server port 80 (used for websites) and will make it available in the 127.0.0.1:99 address which can be accessed with a browser from the phone. You can tunnel as many ports as you want -L 99:127.0.0.1:80 -L 100:127.0.0.1:81 ... Open Firefox go to that address and see the result.\nI use this to access remotely to the WebUI-Aria2 interface to load torrents from my phone, so they will be downloaded when I am not at home and be available when I arrive. I also use it to wake-on-lan my plex server, etc, etc.\nFinal thoughts Jesus f*kin' Christ, it took me a week to figure out how to set correctly the Onion service with Client authentication and once I set it I was like \"Dude, it's not even that hard\". But I was struggling due to I was reading tutorials for setting a v2 Onion service and mixing information with the new v3 Onion service. Once you set everything you have two key authentication factors:\nFrom Tor service with Client authentication (with x25519 algorithm) and From the SSH public key authentication (with ed25519 algorithm) This security level should be enough\nExpect response delays, you should be aware that Tor network is a bit slow. Again, if you have a public IP and/or are able to perform port forwarding, I encourage you to set a WireGuard connection (+ a free DDNS). This will be faster and secure than this Tor solution. I don't think you should be afraid of using Tor, despite the bad reputation that media gave it after the Silk Road scandal. Tor is a great implementation to circumvent censorship and stay anonymous, but as it happens with many great developments, people will use it for bad practices. Tor network is not bad, people is bad. You are most likely to be hacked by a phishing attack on normal internet usage than in the Tor network. Also, you might take a look to OnionShare tool. It is very nice. The Onion service will use around 600-700 MB per month to keep the necessary circuits open on idle. Keep in mind this if you have a metered connection. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["tor","ssh","vpn","OpenWrt"],"title":"Tor a hidden friend to SSH your home network","uri":"/posts/torssh/"},{"categories":["homelab","OpenWrt"],"content":" AdGuard Home is a…\nPrivacy protection center for you and your devices\nFree and open source, powerful network-wide ads \u0026 trackers blocking DNS server.\nIt has a windows, Mac, Android and iOS app. Also a web extension, it is also offering a DNS service, VPN service and a package for OpenWrt. We will focus on the latter, I wrote briefly about it the Ad Blocking, simple \u0026 fast entry.\nThis post is based on this forum entry. The only difference is that it will be installed in an external HDD connected to the OpenWrt router.\nInstallation Login to the router ssh root@192.168.1.1 Update the packages and install wget opkg update \u0026\u0026 opkg install wget Go to the mounted HDD location and create a folder for AdGuardHome cd /mnt/sda1 \u0026\u0026 mkdir AdGuardHome \u0026\u0026 cd AdGuardHome Now download the package wget -c https://github.com/AdguardTeam/AdGuardHome/releases/download/v0.107.6/AdGuardHome_linux_armv7.tar.gz\nPlease note that there are different platform downloads in every release. In this case the selected download is Linux armv7 for OpenWrt installed in a router with an ARMv7 CPU architecture. Unpack it tar xfvz AdGuardHome_linux_armv7.tar.gz Remove the unused rm AdGuardHome_linux_armv7.tar.gz And install it with /mnt/sda1/AdGuardHome/AdGuardHome -s install\nThis will create a service to start, restart and stop the package. Enable and start the service with /etc/init.d/AdGuardHome enable and then /etc/init.d/AdGuardHome start In the browser go to http://192.168.1.1:3000/ (If your router IP is not 192.168.1.1, change this accordingly) Setup the Admin Web Interface to listen on 192.168.1.1 at port 8080. (Changing the web interface port is optional) Set DNS server to listen on 192.168.1.1 at port 5353. Finally, create an user and choose a strong password. Configure OpenWrt to use AdGuardHome Login into LuCi and go to Network -\u003e DHCP and DNS, in General Settings set DNS forwardings to 192.168.1.1#5353. Go to Resolv and Hosts Files tab and check the Ignore resolv file option. Go to Network -\u003e Firewall and in Custom Rules tab add the following: iptables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to 192.168.1.1:5353 iptables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to 192.168.1.1:5353 For OpenWrt 22.xx this will not work, since it is not using fw3 but fw4. So it will ignore the custom rules but the workaround is the following:\nGo to Network -\u003e Firewall -\u003e Port Forwards and create a the following rule: Name: AdGuardHome Protocol: TCP, UDP Source zone: lan External port: 53 Destination zone: lan Internal IP address: 192.168.1.1 Internal port: 5353 This rule will force that any traffic originated on lan will go to the OpenWrt router on port 5353. This blog entry explains it and adds a second rule (NAT rule) that is useful when using a separate DNS blocking device, in that scenario a Pi-hole. The second rule will have the source IP rewritten to match the original.\nModify Blocklists You can add and remove Blocklists as you wish. You can check list from Firebog and oisd.\nOpen in the web browser http://192.168.1.1:8080/ and go to Filters -\u003e DNS blocklists You can use this regex rules to block ads. Go to Filters -\u003e Custom filtering rules. This will block by itself around 50% of ads. Final thoughts Since AdGuardHome is running from an external HDD connected to the router, all configuration and logs will survive reboots. You can do more things with AdGuardHome, like set DNS-over-TLS for more privacy or configure it as a DHCP sever. Maybe you want to block complete access to TikTok. AdGuardHome can block popular sites and services and offers parental control. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["adblock","router","OpenWrt","linux"],"title":"AdGuardHome, like Pi-hole but…better(?)","uri":"/posts/adguardhome/"},{"categories":["homelab","OpenWrt"],"content":" The OpenWrt Project is a Linux operating system targeting embedded devices. Instead of trying to create a single, static firmware, OpenWrt provides a fully writable filesystem with package management. This frees you from the application selection and configuration provided by the vendor and allows you to customize the device through the use of packages to suit any application(…)\nYeeeah baby! good soup!\nHave you ever hated your wireless router so much that you wanted to smash it to the wall because it is just a piece of useless shit?\nWell, I have. Because, let's face it, Internet provider's routers are pretty limited and might freeze with more than 5 connected devices. So you opt to buy a more powerfull with a better processor and more downloadable ram (yes, downloading more ram is still a thing), and yes, the vendor router performs better, but it is still just a router, you are limited to the vendor software (which is close to nothing), it freezes from time to time and you still lag when gaming online!\nOpenWrt, as you previously read, is a filesystem which can replace vendor filesystem and comes with a package management that will allow you to install applications to expand the functionality of the router. This is like uninstalling Windows from your PC and install Linux (or doing it the wrong way, installing windows on a Mac…. Why?).\nAlso, OpenWrt is more secure and stable than vendor systems due to continuous updates, since its code is open to the community and developers. This also means that it can support more and more devices in the future.\nAt the end, this is the goal:\nStable internet connection, Router stability for more device connections, Network security and Additional functionalities. Installing OpenWrt You have to be aware that if your going to modify something on your devices, you need to have at least basic knowledge of what you attempt to do, because you will void the device warranty or brick it and make it useless.\nOpenWrt officially supports a wide variety of devices (see the Table of Hardware for Firmware downloads) and each of them comes with specific instructions depending on the model and version, but most of the times you will just need to:\nDownload and install the OpenWrt Factory Firmware through the WebUI of the vendor using the “Firmware Upgrade” option. Flash a \"…sysupgrade.bin\" specific for your device. It might sound complicated at first sight, but there are plenty of tutorials online and a Forum where you can look for help.\nPopular devices offer the most help, available tutorials and sometimes the easiest installation methods. So which routers are the best choices to buy?\nHow to choose? Well, recommended specs are:\nAt least 16 MB of flash memory and 128MB of RAM Then you can focus on other needs such as:\nHow many USB ports does it have? are they 3.0? Does it have 5G antenna or just 2.4G? are both antennas supported? Routers from Linksys, TP-Link, Netgear, ASUS or Xiaomi are good options.\nOther elaborated alternatives What I mean with elaborated it that you need another more extra steps than the usual OpenWrt installation in a built-in router.\nThe great thing of OpenWrt is that it is not limited only to routers. It can also be installed in PCs as it has x86/64 support and have you heard of Raspberry Pi? Well yes, you can install OpenWrt on a Raspberry Pi!\nOf course the drawback is that you will lose WiFi capabilities but you can solve it with a wireless Access Point (AP) like TP-Link, Cisco, blah blah and a USB 3.0 to Gigabit Ethernet adapter.\nNow what? Give me more steroids! Once you successfully installed OpenWrt, you have so many options to install through LuCI, the web interface of OpenWrt:\nAd Blocking: This will not block ads from YouTube App, but will block most of the ads when surfing the net (what a 90's expression!) and will speed internet navigation on your devices. It can also block trackers and other abuse sites, like your SmartTV annoying need to send information and reach vendor's website.\nMinimal ad blocking can be achieved with: adblock and simple-adblock packages. A more user friendly option is: AdGuard Home which is similar to the popular Pi-hole an adblock and DHCP server for the Raspberry Pi. VPN Client and Server: This is important if you want privacy and/or bypass firewalls. The router will encrypt all the internet traffic of all the devices connected to the router. Also, while setting a VPN server you will be able to connect securely to your home network while you are away and perform task remotely. Download Manager: Achieved through aria2 and the webui-aria2, you can download files directly to the router, torrent directly in the router! Just load the torrent in the webui-aria2, poweroff your laptop/PC and go to sleep, all your Linux ISOs torrents will continue to download in the router. File Sharing: You can set a Samba server or ftp, to share files among your devices. Remember those ISOs you downloaded? This is the way to copy them into your devices. Or if you installed OpenWrt on a PC, you could create a own Network-attached storage (NAS). The simplest and lightweight implementation of Samba for OpenWrt is ksmbd through its luci app. Media Server: Maybe you downloaded some ISOs on your router, that you want to watch immediately on your SmartTV. You can achieve this by setting a DLNA Media Server (with the MiniDLNA implementation) in order to allow the ISOs be visble to the SmartTV connected to the router. SQM (Smart Queue Management): Or in other words, your ally against Bufferbloat and best partner to improve streaming, general internet navigation and reduce latency for gaming online. SQM is heavily CPU-based, so if you need +500mbps speeds, you better consider a x86/64 router and some APs. You can also do QoS over Nftables for User Bandwidth Management. Virtualization: Since the OpenWrt 20.xx release, you can run Docker containers on OpenWrt, at least for the x86/64 version, because virtualization requires more power than a router can offer. But just imagine this: You have your x86/64 OpenWrt with some APs, a few HDD with some Terabytes for NAS where you download your Linux ISOs and Plex installed in a Docker container to stream some ISOs to your SmartTV. Oooh yeah baby. Theming: It might not be important to some people, but it is always pleasant to have a nice theme. Some examples are Material and Argon. The above described is just a tip of the iceberg. There are a lot of reasons to use OpenWrt, some more are:\nDNS encryption, DNS hijacking and access to several DDNS services (not only the provided for the vendor of your router). Create a guest WiFi allowing access to internet, but not your personal devices. Parental control. Add webcams and interact with IoT devices for home automation. There are over 3000 steroids for OpenWrt. You can try and find the ones suitable for your needs and remember: it's Open Source, it's Linux and it's free (but if you are able to donate to the project, please do).\nFinal thoughts I mean, OpenWrt team is still working on the project so better and better improvements might come. If you already have a router, it might not be officially supported due to proprietary drivers, but since OpenWrt code in open to everyone, there are some forks of the project that might have support for your device such as X-Wrt which is based on the Snapshots of OpenWrt (the most updated version). Another and more popular fork is Lean's OpenWrt (which at the time this entry is posted, it is compiling the 21.xx version of OpenWrt). Don't be afraid of Chinese language, grab a translator, be a man and do not fear what you don't understand. There are other alternatives to OpenWrt like: DD-WRT, FreshTomato and Gargoyle, but I personally recommend OpenWrt. If you are thinking about a x86/64 device + APs combo, you may want to take a look on OPNsense and pfSense projects. They are more Firewall-enterprise oriented but I have seen many post of people using them for homelab. As for me, I use a X-Wrt build on a ASUS router that is not officially supported by OpenWrt in which I injected the following steroids:\nArgon themed, Ad Blocking with AdGuard Home, SQM, aria2 and webui-aria2, ksmbd and ftp for file sharing and MiniDLNA I think this is long enough. I might write about Plex and File Sharing on separate entries (and maybe how to build your custom X-Wrt/OpenWrt).\nIf you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["router","OpenWrt","linux"],"title":"OpenWrt or How to give your router steroids","uri":"/posts/openwrt/"},{"categories":["homelab","OpenWrt"],"content":" We all hate ads.\nAccording to Wikipedia,\nAd blocking or ad filtering is a software capability for blocking or altering online advertising in a web browser, an application or a network. This may be done using browser extensions or other methods.\nSo you have choices\nI am not going to detail but give the practical and useful information about the fastest and easiest way to block ads\nBrowser extensions You need, always, no matter what, a web browser ad block extension. It will, of course, block ads only for the web browser. Main alternatives are:\nAdBlock, which allows Acceptable Ads Adblock Plus, which also allows Acceptable Ads and uBlock Origin, which gives a fuck about Acceptable Ads. The term Acceptable Ads means that publishers and advertisers still profit from advertisement by whitelisting their \"high quality ads\" in the ad block extension, allowing them to pop-up when users visit the pages where they advertise. It might be obvious that in this way, developers of the ad block extension profit too.\nuBlock Origin is Open Source and it is against the \"Acceptable advertisement program\". It is described as a wide-spectrum blocker, which happens to be able to function as a mere \"ad blocker\". In other words, it just blocks and gives a fuck.\nIt does not ask for donations, as stated in the README it expresses that if you want to contribute you should do it to the people that maintain the filter lists. These list are EasyList, EasyPrivacy, Peter Lowe’s ad/tracking/malware servers, Online Malicious URL Blocklist, and uBlock Origin's own filter lists.\nYou can install uBlock Origin even in the mobile version of the web browsers and oh yeah, this will block YouTube Ads when using the web browser.\nBlock by DNS In simple terms it is a plain text file with the addresses allowed and disallowed to reach by the device. You can either modify the host file of your PC (for mobile devices it is complicated), rely on ad blocking DNS services (usually it will not block many ads) or use a software to handle this for your local network.\nI will recommend the latter and the use of:\nPi-hole an adblock and DHCP server for the Raspberry Pi. It is very easy to configure and it is a separated devices from the router. The drawback is precisely that: it is a separated device that you need to buy and it must be always turned on alongside your router. OpenWrt ad blocking capabilities, you can either set adblock and simple-adblock packages for low CPU-power routers or AdGuard Home for a nice UI. Setting an DNS blocker on your local network, either a pi-hole or on the OpenWrt router, will block ads for all the devices connected to the network (SmartTVs, phones and all of the smart devices) and you can add or remove filter lists according your needs.\nOthers (?) Here I might say Ad Blocking Apps, but if I am not mistaken, apps connect to a DNS service that blocks the ads. I could say the same for VPN ad blocking, but VPN is more desirable for privacy rather than ad blocking.\nFinal thoughts Go get an ad block extension for your web browser. You might find that some web pages restrict the access when using an Ad Blocker and will ask you to disable it to access, but you the general web browsing experience will improve considerably. There is also Brave a Secure, Fast \u0026 Private Web Browser with Adblocker. If able, set a Pi-hole or OpenWrt with blocking capabilities. Removing ads from installed apps in your phones is more complicated, as the ads \"live\" inside the app. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["adblock","router","OpenWrt","linux"],"title":"Ad Blocking, simple \u0026 fast","uri":"/posts/adblocking/"},{"categories":["homelab"],"content":" I have been very very busy with work. Regardless COVID, I did homeoffice for about 2 weeks (and only due to suspicion of infection), work load increased considerably and therefore, I really abandoned this blog and I regret it, but I will try to keep writting it regardless the work.\nSo, Let's start with the entry:\nSyncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes. Your data is your data alone and you deserve to choose where it is stored, whether it is shared with some third party, and how it's transmitted over the internet.\nYeah, just like that. I have add that Syncthing not only synchronizes your data (files, photos, blah blah) between computers. It has also a mobile app for your phone —which is free on Android and iPhone (under the name of Möbius Sync but I think you have to pay an extra for unlimited syncs).\nSo why would you want to use it?\nWell if you have been unlucky as me, then you have lost your precious data due to a disk failure of your PC/laptop or got it stolen and you did not have a backup. You should have learned by now that you need backups of your data and might have listened of the 3-2-1 Backup Rule. And yeah, you can choose a cloud service like Google Drive, Dropbox, etc. but I will focus only on Syncthing as personal tool for backups at home.\nWhat you need You can set up Syncthing easily on your pc or laptop, which we will assume it is the host. In other words: The computer that will serve as the Cloud of the devices you want to backup.\nSo just download and install it on the Host.\nSome guides for Windows and Debian. Archlinux users will just sudo pacman -S syncthing After the installation, start syncthing and you can access the configuration page through http://localhost:8384/ from the webbrowser on your host. Install syncthing on the devices your want to backup as well. Configure your folders Initially, you will have a Default Folder and it will be marked as \"Unshared\", since you still have not added devices to share. Below, you will see the option Add Folder where you can specify the path of the folders you want to share and the labels for identification.\nI will assume you want to backup the photos of a phone.\nOn the Host:\nGo to http://localhost:8384/ on the webbrowser of your host. On the top right is the option Actions and then Show ID. A long ID and a QR code will appear. On the phone:\nOpen the app and go to Devices and tap on the + Scan the QR code of the host et voilá. Last step is to configure the folders that you want to share between both devices. Surely, you will not struggle, I find the UI is very intuitive. As a tip, path of camera folder on Androd is /storage/emulated/0/DCIM/Camera\nFinal thoughts You have to keep in mind that synchronization will only occur when the devices are online. Shared folders are initially configured as a Send \u0026 Receive Folder. Which means everything the Host does in the folder (add/delete/modify) will be reflected on the Device, and viceversa. You can change this Folder Type. Every Device you install Syncthing will act as a Host itself. This is helpfull if you want to keep synced data only within your Work Lap and your phone; you will need pair the Work Lap and phone with a shared folder that will only be shared between those devices but not in the Host PC (which you will most likely use to backup personal stuff). Please check the Getting Started information and the whole set of Syncthing’s documentation! If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["backup","synchronization"],"title":"Syncthing","uri":"/posts/syncthing/"},{"categories":["blog","hugo","github"],"content":" Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\nThat's in the Hugo website and I guess it's true, since I find it very easy to use to publish this dumb blog when I have the time to.\nNow, Hugo will generate the static site in your PC but how can you make it accessible from the Internet? Well… GitHub Pages is the savior.\nGitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.\nAaah you see?! Hugo generates the static site and GitHub Pages host this site to make it public. So we need both.\nSo lets start.\nPlease note that the following instructions and commands are run from a Terminal.\nCreate the GitHub page host In order to publish your blog, you will need to create a host and as we said, we will be using GitHub Pages for that.\nFirst create from GitHub a repository \u003cUSERNAME\u003e.github.io to host your generated content. You can follow GitHub instructions here, it's very simple and clear to understand. Make sure that under Settings of your \u003cUSERNAME\u003e.github.io the main(or master) branch and the /(root) folder are selected as Source, to publish your GitHub Pages site. Be aware that the repository creation will take around 20-30 minutes to be available online. Also intall git sudo pacman -S git (Need help for installing?) Creating the blog with Hugo. Install Hugo. In Archlinux just sudo pacman -S hugo (see Hugo Install Instructions for other operating systems). Create a site/blog with hugo new site \"yourSite\"\nThis will create a folder name yourSite Enter to that folder cd yourSite Add a theme. I am using Meme theme which was added with git submodule add --depth 1t https://github.com/reuixiy/hugo-theme-meme.git themes/meme There are a lot of themes you can choose from the Hugo theme page. Configuring the theme is not difficult —I will not detail it. Now add a new post with hugo new posts/NewPost.org. As you can see, I am using an org to write the post (see a brief explanation of what org mode is), but it can be done using the markdown syntax as well.\nYou will see a new file NewPost.org created under content/posts folder. This file will include the content of your post/blog entry. The file will begin with something like this\n--- title: \"NewPost\" date: 2021-01-03T19:37:05-06:00 draft: true --- Once you are done with editing and writing you can preview the results with hugo server -D this will create a local page (including Drafts, that's the reason of -D) which you can access from your browser in http://localhost:1313/ You can close the server by pressing Crtl+c. Configure your config.toml file located inside yourSite folder. It might start with something like this:\nbaseURL = \"https://example.org/\" languageCode = \"en-us\" title = \"My New Hugo Site\" theme = \"ananke\" Replace the baseURL URL with your \u003cUSERNAME.github.io Change the tittle and select your theme. We are using here meme theme. This is pretty much all the config you need for now. I will not explain more since it depends on the theme you choose. Before proceeding run rm -rf public to completely remove the public directory (this does not need to be done on every update). Change draft: true to false in your post and run hugo to export the NewPost.org as an html file. Finally, bind your GitHub repository to your public directory where Hugo will store the pages to be published with git submodule add -b main https://github.com/\u003cUSERNAME\u003e/\u003cUSERNAME\u003e.github.io.git public (this does not need to be done on every update). Update your git repository You have already exported your blog entry. Now it's time to make it public in the internet.\nFrom inside your public folder (which is located inside yourSite folder) run git add . to upload all the files to your \u003cUSERNAME\u003e.github.io repository. Now commit the changes git commit -m \"My first blog\" And finally make it public with git push origin master That's it. You are done. You are able to access to your blog in \u003cUSERNAME\u003e.github.io domain. More information about Hugo can be found here and here.\nYou can uso Hugo with gitlab as a Host for your website. See gitlab info here.\nIf you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["emacs","git","hugo","blog"],"title":"Blog with Hugo (and GitHub Pages)","uri":"/posts/blogwithhugo/"},{"categories":["orgmode"],"content":" I wanted to write a post about Orgzly for a few days, but I have been very busy these days. As I told in previous posts, I started using orgmode at work, but not for my everyday personal tasks… and suddenly I came across with Orgzly.\nOrgzly is an outliner for notes and to-do lists for Android devices! It basically allows you to write notes as in org-mode in Emacs, but in your phone —because you wont be carrying your laptop all day.\nYou can use Orgzly to take notes, to-do list or manage your agenda. I am using it for remainders, pending tasks and write some good ass poems (I used to write poems in conventional note taking android apps and lost them all when my last phone was stolen).\nThe good thing is that you can sync your notes created in Orgzly with your PC/laptop using Dropbox.\nInstallation Just go to the playstore and look for Orgzly and no, there is no iOS version.\nDropbox sync Once Orgzly is installed in your phone you can enable sync trough Dropbox with:\nGo to Settings Click on Sync Click on Repositories Click on Dropbox (if you already have some repositories, click the plus icon first) Click on Link to Dropbox\nYou will be prompted to login to Dropbox and authorize access to Orgzly. Enter the directory inside Dropbox (without \"Dropbox\" part)\nFor example: If you have a folder named org inside Dropbox just type: /org Now every note you write will appear in your Dropbox and you can check it anytime you want from your laptop and phone.\nHow does it look like? Something like this: Full documentation of Orgzly can be found here.\nIf you found this content useful, please support me : BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["orgmode","orgzly","mobile","dropbox","android"],"title":"Orgzly and never lose your notes again","uri":"/posts/orgzly/"},{"categories":["orgmode","roam","windows"],"content":" Org-roam Org-roam is a note-taking tool for Emacs using Org-mode. It is a replica of RoamResearch: \"A note-taking tool for networked thought\". Both are based in the Zettelkasten method, which is described as:\nUsing a Zettelkasten is about optimizing a workflow of learning and producing knowledge.\nThe method was developed by Niklas Luhmann and the literal translation is:\nZettelkasten = Box of notes.\nIn simple words: Org-roam allows you to make connections between your notes, in order to make a more efficient creative/learning process.\nYou can read a more detailed introduction to Zettelkasten in here and here. Further reading in the official site and some help for workflow.\n\"Your mind is for having ideas, not holding them.\" –David Allen\nInstalling Org-roam This post assumes you have already installed DoomEmacs in Windows (Doom, Emacs \u0026 Windows).\nDownload a C compiler, I am using: MinGW-64 and add it to your path (use the online installer for ease).\nRun (executable-find \"gcc\") in emacs, it should evaluate to non-nil if the C compiler is correctly installed. Back in Emacs, install and configure org-roam\nOpen ~/.doom.d/init.el and replace org, in :lang section, with (org +roam2) Define your org-roam-directory in your config.el: (setq org-roam-directory \"/path/of/your/roam/directory\") To get graphics, download Graphviz (the zip) and extract it where you prefer.\nAdd this to your config.el: (setq org-roam-graph-executable \"/path/to/dot.exe\") You might want to add your preferred viewer (or graphs will be open in Firefox by default): (setq org-roam-graph-viewer \"/path/to/image-viewer\") Run ~/.emacs.d/bin/doom sync The first time you run orgroam, emacs will compile the emacsql binary, once finished it should be ready to use. et voilà!. Here is how taking notes looks (from the Org-rom github page).\nI still have some pending:\nTODO Set Org-roam protocol in Windows If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["org","roam","windows","zettelkasten"],"title":"Org-roam \u0026 Windows","uri":"/posts/org_roam_windows/"},{"categories":["emacs"],"content":" Org-mode is an Emacs mode for note taking, project planing and making TODO lists (because we all need TODO lists to GTD). It can handle more things: Calendar, diary, agenda and export you Org documents to other file extensions. I am not going do talk about all can do with org-mode, you can google yourself for further information. I am going to focus in note taking and export.\nThe org file It all starts with a file with a .org extension. Create one in Doomemacs with SPC . and name it \"myfile.org\". By default a template should fill the title like:\n#+TITLE: Myfile This is part of the heading of the document. Here you can specify some options like the author, email, date or disable the table of contents (toc).\n#+AUTHOR: Some Author #+EMAIL: Some@email.com #+OPTIONS: toc:nil After this, the body of the document begins. You start a headline with * and two of them ** indicate a subheadline. You can specify verbatim text between ~|~, code inside =|=, italics surrounded by /|/ and bold text inside *|*. (The | indicates the cursor position, or where you write your text).\n* Heading 1 ** Heading 1.1 This is ~verbatim~, =code=, /italics/, *bold* and _underlined_ as well. Lists and TODO's For simple bullet list you can start it with:\n- Item one - Item 2 or numbered list\n1. First. 2. Second. The cool thing, is that pressing Alt-RET (alt-enter) will automatically take you to the next line keeping the counting of the items (e.g. If you are in item \"2. Second\" and press Alt-RET the next item will be \"3. |\").\nTo insert a TODO just type: \"* Buy milk\" and then press SPC m t t to mark it as a TODO. Or press Shift-Right/Left to change the state from \"TODO\" to \"DONE\"\n* TODO Buy milk. * WAIT Get money to but milk. * DONE Get a Job. Blocks, comments \u0026 quotes To start a block just write (ignore the \".\" at the beginning):\n.#+BEGIN_SRC NameOfTheLanguageCode .#+END_SRC Quotes and comments are similar\n#+begin_quote #+end_quote #+BEGIN_COMMENT #+END_COMMENT Tables, figures \u0026 links Yes, we can have tables. Use \"|\" and type \"name\", again \"|\", type \"Phone\" and press TAB. You will see how Emacs starts to arrange the table fitting automatically the width according to the content.\n| Name | Phone | Age | |-------+-------+-----| | Peter | 1234 | 17 | | Anna | 4321 | 25 | Inserting a figure is simple as typing: [[/path/to/the/image][desciption]]. If you press zi in DoomEmacs it will call the function org-toggle-inline-images and will display the image you set in the document.\nThe same syntax is used for the links, just type: [[url][desciption]]\nIn DoomEmacs you can press SPC m l l to insert links and files/images.\nFinal thoughts The great thing about org-mode is that you can fold/unfold the sections of the document, to navigate quickly trough the notes, and export this plain text document (Yes, if you open the org file in a notepad you will see just plain text, is Emacs that renders the plain text) to a more common document types such as:\nOrg document –\u003e LaTeX document -\u003e PDF document. Org document –\u003e ODT document (the free alternative to Microsoft doc files, look at LibreOffice project). Org document –\u003e Markdown document (another plain text format). Org document –\u003e html document. Org document –\u003e Plain text document. You can export from one to another document with Pandoc, which was meant to convert from Markdown to any type of document. As the Pandoc's page says:\nIf you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert between the following formats.\nAnd there are several formats. However, for simple day-life PDF, html, ODT and plain text (for emails) the Emacs org-export works fine.\nAs an example, an org document can look like this If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["orgmode","emacs"],"title":"Org-mode","uri":"/posts/org_mode/"},{"categories":["DoomEmacs","windows"],"content":" Doom-emacs. It's a configuration framework for Emacs. Basically, it overrides the Emacs keybindings with most of vim's.\nAs I mentioned in the last post. I started using Emacs at work due to org-mode… and work PC's use windows behind a Firewall, so using git, pip, melpa and some more are useless in my work desktop (In the Laptop all of them work if I connect to another network, which was what I did).\nAs you can imagine, Doom is for a GNU program so Windows support is limited (because, who cares?). The guide is poor, it describes how to install it with scoop/chocolatey (that don't work with a firewall). However, you can use the git-bash to install Doom without scoop/chocolatey. Here is how you do it:\nWhat you need If you have limited permissions in Windows PC (e.g. admin privileges), you might not be able to use Chocolatey/Scoop. However, you can still use git-bash.exe portable version!\nDownload git. Download Ripgrep and fd. Make sure you download the windows-gnu version. Of course, download emacs. Extract the binaries1 from Ripgrep and fd to their respective folders and place them where you want.\nYou should have one folder for Ripgrep and another for fd. Extract emacs and place it where you want. It does not matter where they are, we will add them to the Path later (but keep them safe and where you can remember).\nInstructions Edit system environment variables Go to Control panel -\u003e User Accounts -\u003e Change my environment variables.\nNew, type HOME and set your C:\\Users\\USERNAME and OK. Select Path, edit and add your C:\\path\\to\\the\\emacs\\bin folder and OK. Select Path, edit and add your C:\\path\\to\\the\\ripgrep folder and OK. Select Path, edit and add your C:\\path\\to\\the\\fd folder and OK. Click Ok. We still need to add C:\\Users\\USERNAME\\.emacs.d\\bin; but first download Doom files. Install Doom Open git-bash.exe Type cd ~ Run: git clone https://github.com/hlissner/doom-emacs ~/.emacs.d After the download is completed, type cd ~/.emacs.d/bin and run: ./doom install If everything is fine, Doom is now installed. Just in case run ./doom sync Go to Control panel -\u003e User Accounts -\u003e Change my environment variables.\nSelect Path, edit and add C:\\Users\\USERNAME\\.emacs.d\\bin, click OK -\u003e OK. Now you can start emacs and will see the Doom dashboard! Nerd icons By default icons will not be enabled in Windows.\nIf icons is not installed. Open emacs and M-x nerd-icons-install-fonts RET. Select where to download the fonts and install them (double click -\u003e install). Restart emacs and there you go. From one PC to another If one of your PCs does not have internet connection or is under a firewall, you can:\nCopy your ~/.doom.d ~/.emacs.d ripgrep fd emacs folders directly to the other PC (~/.domm.d ~/.emacs.d go in C:\\Users\\USERNAME) Edit the system environment variables accordingly. Copy and install the fonts you downloaded with nerd-icons-install-fonts Open git-bash.exe, cd ~/.emacs.d/bin and run: ./doom sync et voilà!. Emacs server If you use emacs server, Doom will place the server file in C:\\Users\\USERNAME\\.emacs.d\\.local\\server folder.\nGo to Control panel -\u003e User Accounts -\u003e Change my environment variables.\nNew type EMACS_SERVER_FILE and set the file path C:\\Users\\USERNAME\\.emacs.d\\.local\\server\\server. Create a emacsclientw.exe shortcut with emacsclientw.exe -nc in target, run emacs server and emacsclientw will work. Now, rejoice!\nIf you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y 1 with binaries I mean the .exe\n","description":"","tags":["doom","emacs","windows","git"],"title":"Doom, Emacs \u0026 Windows","uri":"/posts/doom_emacs_windows/"},{"categories":null,"content":" First things first This place is going to be my personal blog. I am going to write about nerd things I don't generally speak with people. Such things include: Emacs, linux, vim, encryption and a e s t h e t i c s.\nThis blog is hosted in github, written in Emacs with org-mode and posted with Hugo (This is one of the topics I'll be posting later: How to blog with github and Hugo).\nRecently, I started using emacs at work due to org-mode. I have used emacs in linux for a few months after loving LaTex previews (I am going to post about this later as well). However, at work I have to use windows under heavily firewalls and that complicate the Emacs installation.\nI have always though that Emacs is neat. Just reading the name in a monospaced font makes me think that Emacs is elegant. I love Emacs and I used the vanilla key-bindings when I started using it, but never liked them. When I decided to used Emacs, I remember reading the documentation for minimal use and it went something like:\nSo you just have to press C-u C-x C-c … wait what??\nI was very used to vim key-bindings, so the Emacs learning curve was very long. After some months, I was able to use Emacs comfortably for taking quick notes at work meetings and organizing my pending tasks (Yes, TODO's), but the key-bindings were tedious.\nLuckily, there are frameworks that allows you to emulate vim key-bindings in Emacs. Some of these frameworks are: Spacemacs, Centaur Emacs and Doom-emacs. The latest, is the one I use now and installing in windows was and Odyssey but worth it!\nThe next posts are going to be about:\nHow to install Doom-emacs in windows Org-mode \u0026 org-roam … and we'll see. If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y ","description":"","tags":["introduction","hugo"],"title":"In the Beginning","uri":"/posts/in-the-beginning/"}]
