[{"categories":["homelab"],"content":" I have been very very busy with work. Regardless COVID, I did homeoffice for about 2 weeks (and only due to suspicion of infection), work load increased considerably and therefore, I really abandoned this blog and I regret it, but I will try to keep writting it regardless the work.\n So, Let's start with the entry:\n Syncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes. Your data is your data alone and you deserve to choose where it is stored, whether it is shared with some third party, and how it's transmitted over the internet.\n  Yeah, just like that. I have add that Syncthing not only synchronizes your data (files, photos, blah blah) between computers. It has also a mobile app for your phone —which is free on Android and iPhone (under the name of Möbius Sync but I think you have to pay an extra for unlimited syncs).\n So why would you want to use it?\n Well if you have been unlucky as me, then you have lost your precious data due to a disk failure of your PC/laptop or got it stolen and you did not have a backup. You should have learned by now that you need backups of your data and might have listened of the 3-2-1 Backup Rule. And yeah, you can choose a cloud service like Google Drive, Dropbox, etc. but I will focus only on Syncthing as personal tool for backups at home.\nWhat you need  You can set up Syncthing easily on your pc or laptop, which we will assume it is the host. In other words: The computer that will serve as the Cloud of the devices you want to backup.\n  So just download and install it on the Host.\n Some guides for Windows and Debian. Archlinux users will just sudo pacman -S syncthing   After the installation, start syncthing and you can access the configuration page through http://localhost:8384/ from the webbrowser on your host. Install syncthing on the devices your want to backup as well.    Configure your folders  Initially, you will have a Default Folder and it will be marked as \"Unshared\", since you still have not added devices to share. Below, you will see the option Add Folder where you can specify the path of the folders you want to share and the labels for identification.\n I will assume you want to backup the photos of a phone.\n On the Host:\n Go to http://localhost:8384/ on the webbrowser of your host. On the top right is the option Actions and then Show ID. A long ID and a QR code will appear.    On the phone:\n Open the app and go to Devices and tap on the + Scan the QR code of the host et voilá.    Last step is to configure the folders that you want to share between both devices. Surely, you will not struggle, I find the UI is very intuitive. As a tip, path of camera folder on Androd is /storage/emulated/0/DCIM/Camera\n  Final thoughts   You have to keep in mind that synchronization will only occur when the devices are online. Shared folders are initially configured as a Send \u0026 Receive Folder. Which means everything the Host does in the folder (add/delete/modify) will be reflected on the Device, and viceversa. You can change this Folder Type. Every Device you install Syncthing will act as a Host itself. This is helpfull if you want to keep synced data only within your Work Lap and your phone; you will need pair the Work Lap and phone with a shared folder that will only be shared between those devices but not in the Host PC (which you will most likely use to backup personal stuff). Please check the Getting Started information and the whole set of Syncthing’s documentation!  If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y    ","description":"","tags":["backup","synchronization"],"title":"Syncthing","uri":"/posts/syncthing/"},{"categories":["blog","hugo","github"],"content":"  Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\n That's in the Hugo website and I guess it's true, since I find it very easy to use to publish this dumb blog when I have the time to.\n Now, Hugo will generate the static site in your PC but how can you make it accessible from the Internet? Well… GitHub Pages is the savior.\n GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.\n  Aaah you see?! Hugo generates the static site and GitHub Pages host this site to make it public. So we need both.\n So lets start.\n Please note that the following instructions and commands are run from a Terminal.\nCreate the GitHub page host  In order to publish your blog, you will need to create a host and as we said, we will be using GitHub Pages for that.\n First create from GitHub a repository \u003cUSERNAME\u003e.github.io to host your generated content. You can follow GitHub instructions here, it's very simple and clear to understand. Make sure that under Settings of your \u003cUSERNAME\u003e.github.io the main(or master) branch and the /(root) folder are selected as Source, to publish your GitHub Pages site. Be aware that the repository creation will take around 20-30 minutes to be available online. Also intall git sudo pacman -S git (Need help for installing?)    Creating the blog with Hugo.   Install Hugo. In Archlinux just sudo pacman -S hugo (see Hugo Install Instructions for other operating systems).  Create a site/blog with hugo new site \"yourSite\"\n This will create a folder name yourSite   Enter to that folder cd yourSite Add a theme. I am using Meme theme which was added with git submodule add --depth 1t https://github.com/reuixiy/hugo-theme-meme.git themes/meme There are a lot of themes you can choose from the Hugo theme page. Configuring the theme is not difficult —I will not detail it.  Now add a new post with hugo new posts/NewPost.org. As you can see, I am using an org to write the post (see a brief explanation of what org mode is), but it can be done using the markdown syntax as well.\n You will see a new file NewPost.org created under content/posts folder. This file will include the content of your post/blog entry.  The file will begin with something like this\n--- title: \"NewPost\" date: 2021-01-03T19:37:05-06:00 draft: true ---     Once you are done with editing and writing you can preview the results with hugo server -D this will create a local page (including Drafts, that's the reason of -D) which you can access from your browser in http://localhost:1313/ You can close the server by pressing Crtl+c.  Configure your config.toml file located inside yourSite folder. It might start with something like this:\nbaseURL = \"https://example.org/\" languageCode = \"en-us\" title = \"My New Hugo Site\" theme = \"ananke\"   Replace the baseURL URL with your \u003cUSERNAME.github.io Change the tittle and select your theme. We are using here meme theme. This is pretty much all the config you need for now. I will not explain more since it depends on the theme you choose.   Before proceeding run rm -rf public to completely remove the public directory. Change draft: true to false in your post and run hugo to export the NewPost.org as an html file. Finally, bind your GitHub repository to your public directory where Hugo will store the pages to be published with git submodule add -b main https://github.com/\u003cUSERNAME\u003e/\u003cUSERNAME\u003e.github.io.git public    Update your git repository  You have already exported your blog entry. Now it's time to make it public in the internet.\n From inside your public folder (which is located inside yourSite folder) run git add . to upload all the files to your \u003cUSERNAME\u003e.github.io repository. Now commit the changes git commit -m \"My first blog\" And finally make it public with git push origin master That's it. You are done. You are able to access to your blog in \u003cUSERNAME\u003e.github.io domain.  More information about Hugo can be found here and here.\n You can uso Hugo with gitlab as a Host for your website. See gitlab info here.\nIf you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y    ","description":"","tags":["emacs","git","hugo","blog"],"title":"Blog with Hugo (and GitHub Pages)","uri":"/posts/blogwithhugo/"},{"categories":["orgmode"],"content":"  I wanted to write a post about Orgzly for a few days, but I have been very busy these days. As I told in previous posts, I started using orgmode at work, but not for my everyday personal tasks… and suddenly I came across with Orgzly.\n Orgzly is an outliner for notes and to-do lists for Android devices! It basically allows you to write notes as in org-mode in Emacs, but in your phone —because you wont be carrying your laptop all day.\n You can use Orgzly to take notes, to-do list or manage your agenda. I am using it for remainders, pending tasks and write some good ass poems (I used to write poems in conventional note taking android apps and lost them all when my last phone was stolen).\n The good thing is that you can sync your notes created in Orgzly with your PC/laptop using Dropbox.\nInstallation  Just go to the playstore and look for Orgzly and no, there is no iOS version.\n  Dropbox sync  Once Orgzly is installed in your phone you can enable sync trough Dropbox with:\n Go to Settings Click on Sync Click on Repositories Click on Dropbox (if you already have some repositories, click the plus icon first)  Click on Link to Dropbox\n You will be prompted to login to Dropbox and authorize access to Orgzly.    Enter the directory inside Dropbox (without \"Dropbox\" part)\n For example: If you have a folder named org inside Dropbox just type: /org    Now every note you write will appear in your Dropbox and you can check it anytime you want from your laptop and phone.\n How does it look like? Something like this:   Full documentation of Orgzly can be found here.\nIf you found this content useful, please support me : BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y    ","description":"","tags":["orgmode","orgzly","mobile","dropbox","android"],"title":"Orgzly and never lose your notes again","uri":"/posts/orgzly/"},{"categories":["orgmode","roam","windows"],"content":" Org-roam  Org-roam is a note-taking tool for Emacs using Org-mode. It is a replica of RoamResearch: \"A note-taking tool for networked thought\". Both are based in the Zettelkasten method, which is described as:\n Using a Zettelkasten is about optimizing a workflow of learning and producing knowledge.\n The method was developed by Niklas Luhmann and the literal translation is:\nZettelkasten = Box of notes.\n  In simple words: Org-roam allows you to make connections between your notes, in order to make a more efficient creative/learning process.\n You can read a more detailed introduction to Zettelkasten in here and here. Further reading in the official site and some help for workflow.\n\"Your mind is for having ideas, not holding them.\" –David Allen\n Installing Org-roam  This post assumes you have already installed DoomEmacs in Windows (Doom, Emacs \u0026 Windows). Most of the instructions were taken from Org-roam official site\n  Download the Official binary of sqlite3 (the one that includes the command-line shell program aka the .exe)\n Extract it and add it to your path. You can check Doom, Emacs \u0026 Windows to see how to add it to your path.    In Emacs, install the emacsql-sqlite3 package\n Using DoomEmacs, just add (package! emacsql-sqlite3) in your packages.el (located in C:\\Users\\yourusername\\.doom.d\\1 or ~/.doom.d) and run ~/.emacs.d/bin/doom sync in the git-bash.    Using a text editor (e.g. notepad) modify org-roam-db.el (located in ~/.emacs.d/.local/straight/repos/emacsql-sqlite3/):\n Replace (require 'emacsql-sqlite) with (require 'emacsql-sqlite3) Comment/deactivate or delete the complete function (defconst org-roam-db--sqlite-available-p ... )   In the function (defun org-roam-db ..., replace emacsql-sqlite with emacsql-sqlite3  If you compile .el files, ensure to replace org-roam-db.elc with the new source you modified.\n In other words: delete the ~/.emacs.d/.local/straight/build/org-roam-db.elc And run ~/.emacs.d/bin/doom sync once more.    Back in Emacs, install and configure org-roam\n Open ~/.doom.d/init.el and replace org, in :lang section, with (org +roam) Define your org-roam-directory in your config.el: (setq org-roam-directory \"/path/of/your/roam/directory\")    To get graphics, download Graphviz (the zip) and extract it where you prefer.\n Add this to your config.el: (setq org-roam-graph-executable \"/path/to/dot.exe\") You might want to add your preferred viewer (or graphs will be open in Firefox by default): (setq org-roam-graph-viewer \"/path/to/image-viewer\")   Run ~/.emacs.d/bin/doom sync et voilà!.  Here is how taking notes looks in DoomEmacs (from the Org-rom github page).\n   I still have some pending:\n TODO Set Org-roam protocol in Windows  If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y      1 C:\\Users\\yourusername is your HOME folder \"~\"\n    ","description":"","tags":["org","roam","windows","zettelkasten"],"title":"Org-roam \u0026 Windows","uri":"/posts/org_roam_windows/"},{"categories":["emacs"],"content":"  Org-mode is an Emacs mode for note taking, project planing and making TODO lists (because we all need TODO lists to GTD). It can handle more things: Calendar, diary, agenda and export you Org documents to other file extensions. I am not going do talk about all can do with org-mode, you can google yourself for further information. I am going to focus in note taking and export.\nThe org file  It all starts with a file with a .org extension. Create one in Doomemacs with SPC . and name it \"myfile.org\". By default a template should fill the title like:\n#+TITLE: Myfile  This is part of the heading of the document. Here you can specify some options like the author, email, date or disable the table of contents (toc).\n#+AUTHOR: Some Author #+EMAIL: Some@email.com #+OPTIONS: toc:nil  After this, the body of the document begins. You start a headline with * and two of them ** indicate a subheadline. You can specify verbatim text between ~|~, code inside =|=, italics surrounded by /|/ and bold text inside *|*. (The | indicates the cursor position, or where you write your text).\n* Heading 1 ** Heading 1.1 This is ~verbatim~, =code=, /italics/, *bold* and _underlined_ as well.    Lists and TODO's  For simple bullet list you can start it with:\n- Item one - Item 2  or numbered list\n1. First. 2. Second.  The cool thing, is that pressing Alt-RET (alt-enter) will automatically take you to the next line keeping the counting of the items (e.g. If you are in item \"2. Second\" and press Alt-RET the next item will be \"3. |\").\n To insert a TODO just type: \"* Buy milk\" and then press SPC m t t to mark it as a TODO. Or press Shift-Right/Left to change the state from \"TODO\" to \"DONE\"\n* TODO Buy milk. * WAIT Get money to but milk. * DONE Get a Job.    Blocks, comments \u0026 quotes  To start a block just write (ignore the \".\" at the beginning):\n.#+BEGIN_SRC NameOfTheLanguageCode .#+END_SRC  Quotes and comments are similar\n#+begin_quote #+end_quote #+BEGIN_COMMENT #+END_COMMENT    Tables, figures \u0026 links  Yes, we can have tables. Use \"|\" and type \"name\", again \"|\", type \"Phone\" and press TAB. You will see how Emacs starts to arrange the table fitting automatically the width according to the content.\n| Name | Phone | Age | |-------+-------+-----| | Peter | 1234 | 17 | | Anna | 4321 | 25 |  Inserting a figure is simple as typing: [[/path/to/the/image][desciption]]. If you press zi in DoomEmacs it will call the function org-toggle-inline-images and will display the image you set in the document.\n The same syntax is used for the links, just type: [[url][desciption]]\n In DoomEmacs you can press SPC m l l to insert links and files/images.\n  Final thoughts  The great thing about org-mode is that you can fold/unfold the sections of the document, to navigate quickly trough the notes, and export this plain text document (Yes, if you open the org file in a notepad you will see just plain text, is Emacs that renders the plain text) to a more common document types such as:\n Org document –\u003e LaTeX document -\u003e PDF document. Org document –\u003e ODT document (the free alternative to Microsoft doc files, look at LibreOffice project). Org document –\u003e Markdown document (another plain text format). Org document –\u003e html document. Org document –\u003e Plain text document.  You can export from one to another document with Pandoc, which was meant to convert from Markdown to any type of document. As the Pandoc's page says:\n If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert between the following formats.\n And there are several formats. However, for simple day-life PDF, html, ODT and plain text (for emails) the Emacs org-export works fine.\n As an example, an org document can look like this  If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y    ","description":"","tags":["orgmode","emacs"],"title":"Org-mode","uri":"/posts/org_mode/"},{"categories":["DoomEmacs","windows"],"content":" Doom-emacs. It's a configuration framework for Emacs. Basically, it overrides the Emacs keybindings with most of vim's.\n As I mentioned in the last post. I started using Emacs at work due to org-mode… and work PC's use windows behind a Firewall, so using git, pip, melpa and some more are useless in my work desktop (In the Laptop all of them work if I connect to another network, which was what I did).\n As you can imagine, Doom is for a GNU program so Windows support is limited (because, who cares?). The guide is poor, it describes how to install it with scoop/chocolatey (that don't work with a firewall). However, you can use the git-bash to install Doom without scoop/chocolatey. Here is how you do it:\nWhat you need  If you have limited permissions in Windows PC (e.g. admin privileges), you might not be able to use Chocolatey/Scoop. However, you can still use git-bash.exe portable version!\n Download git. Download Ripgrep and fd. Make sure you download the windows-gnu version. Of course, download emacs.  Extract the binaries1 from Ripgrep and fd to their respective folders and place them where you want.\n You should have one folder for Ripgrep and another for fd.  Extract emacs and place it where you want. It does not matter where they are, we will add them to the Path later (but keep them safe and where you can remember).\n  Instructions  Edit system environment variables    Go to Control panel -\u003e User Accounts -\u003e Change my environment variables.\n New, type HOME and set your C:\\Users\\USERNAME and OK. Select Path, edit and add your C:\\path\\to\\the\\emacs\\bin folder and OK. Select Path, edit and add your C:\\path\\to\\the\\ripgrep folder and OK. Select Path, edit and add your C:\\path\\to\\the\\fd folder and OK. Click Ok.   We still need to add C:\\Users\\USERNAME\\.emacs.d\\bin; but first download Doom files.    Install Doom   Open git-bash.exe Type cd ~ Run: git clone https://github.com/hlissner/doom-emacs ~/.emacs.d After the download is completed, type cd ~/.emacs.d/bin and run: ./doom install If everything is fine, Doom is now installed. Just in case run ./doom sync  Go to Control panel -\u003e User Accounts -\u003e Change my environment variables.\n Select Path, edit and add C:\\Users\\USERNAME\\.emacs.d\\bin, click OK -\u003e OK.   Now you can start emacs and will see the Doom dashboard!    All the icons  By default all-the-icons will not be enabled in Windows.\n If all-the-icons is not installed. Open emacs and M-x package-install RET all-the-icons RET. M-x all-the-icons-install-fonts select where to download the fonts and install them (double click -\u003e install). Restart emacs and there you go.    From one PC to another  If one of your PCs does not have internet connection or is under a firewall, you can:\n Copy your ~/.doom.d ~/.emacs.d ripgrep fd emacs folders directly to the other PC (~/.domm.d ~/.emacs.d go in C:\\Users\\USERNAME) Edit the system environment variables accordingly. Copy and install the fonts you downloaded with all-the-icons Open git-bash.exe, cd ~/.emacs.d/bin and run: ./doom sync et voilà!.    Emacs server  If you use emacs server, Doom will place the server file in C:\\Users\\USERNAME\\.emacs.d\\.local\\cache\\server folder.\n  Go to Control panel -\u003e User Accounts -\u003e Change my environment variables.\n New type EMACS_SERVER_FILE and set the file path C:\\Users\\USERNAME\\.emacs.d\\.local\\cache\\server\\server. Create a emacsclientw.exe shortcut with emacsclientw.exe -nc in target, run emacs server and emacsclientw will work.    Now, rejoice!\n  If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y      1  with binaries I mean the .exe\n    ","description":"","tags":["doom","emacs","windows","git"],"title":"Doom, Emacs \u0026 Windows","uri":"/posts/doom_emacs_windows/"},{"categories":null,"content":"\"I'm John Mayer and I'm ready to be a star!\"\n Google that and thank me later.\n I'm a nerd who likes linux (I use Arch, BTW), Emacs, writing in LaTex, learning and sharing. I'm not a coder, I just like that my laptop boots in less than 10 seconds.\n You can find me at twitter and Instagram where I share other kind of stuff.\n","description":"","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":" First things first  This place is going to be my personal blog. I am going to write about nerd things I don't generally speak with people. Such things include: Emacs, linux, vim, encryption and a e s t h e t i c s.\n This blog is hosted in github, written in Emacs with org-mode and posted with Hugo (This is one of the topics I'll be posting later: How to blog with github and Hugo).\n Recently, I started using emacs at work due to org-mode. I have used emacs in linux for a few months after loving LaTex previews (I am going to post about this later as well). However, at work I have to use windows under heavily firewalls and that complicate the Emacs installation.\n I have always though that Emacs is neat. Just reading the name in a monospaced font makes me think that Emacs is elegant. I love Emacs and I used the vanilla key-bindings when I started using it, but never liked them. When I decided to used Emacs, I remember reading the documentation for minimal use and it went something like:\n So you just have to press C-u C-x C-c … wait what??\n I was very used to vim key-bindings, so the Emacs learning curve was very long. After some months, I was able to use Emacs comfortably for taking quick notes at work meetings and organizing my pending tasks (Yes, TODO's), but the key-bindings were tedious.\n Luckily, there are frameworks that allows you to emulate vim key-bindings in Emacs. Some of these frameworks are: Spacemacs, Centaur Emacs and Doom-emacs. The latest, is the one I use now and installing in windows was and Odyssey but worth it!\n The next posts are going to be about:\n How to install Doom-emacs in windows Org-mode \u0026 org-roam … and we'll see.  If you found this content useful, please support me: BTC: 1E2YjL6ysiPxRF4AEdXChpzpesRuyzgE1y    ","description":"","tags":["introduction","hugo"],"title":"In the Beginning","uri":"/posts/in-the-beginning/"}]
